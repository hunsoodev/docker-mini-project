# version: "3.9" (버전 생략 가능)

services:
  # [애플리케이션 컨테이너]
  # 들어오는 모든 요청을 받아들여 / PHP 인터프리터를 트리거하는 역할 (PHP 컨테이너로 전달)
  server:
    # image: 'nginx:stable-alpine-slim'
    build:
      context: .
      dockerfile: dockerfiles/nginx.dockerfile
    ports:
      - '8080:80'
    volumes:
      - ./src:/var/www/html
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - php
      - mysql
  # # PHP 코드와 Laravel 코드 실행
  php:
    build:
      context: .
      dockerfile: dockerfiles/php.dockerfile
    volumes:
      - ./src:/var/www/html:delegated
    # ports:
    #   - '3000:9000'  
    # -> 요청을 전송하기 위해 이렇게 작성할 필요가 없음. nginx.conf에서 정의를 했기 때문
    # -> php 컨테이너로 직접 요청을 전송할게 아님 (로컬 호스트를 통해서 통신하는 게 아님)
    # 컨테이너 간 통신을 하는 상황. 따라서 nginx.conf 파일의 포트를 9000으로 변경해야 함
  mysql:
    image: mysql
    env_file:
      - ./env/mysql.env
    volumes:
      - mysql-db-data:/var/lib/mysql
  # # [유틸리티 컨테이너]
  # Laravel에 의해 내부적으로 사용됨 (처음 Laravel 애플리케이션을 설정하는데 사용)
  composer:
    build: 
      context: ./dockerfiles
      dockerfile: composer.dockerfile
    volumes:
      - ./src:/var/www/html

  # 특정 Laravel의 명령을 실행하려면 필요 (ex. 초기 데이터로 데이터베이스 채우기)
  artisan:
    build:
      context: .
      dockerfile: dockerfiles/php.dockerfile
    volumes:
      - ./src:/var/www/html
    entrypoint: ["php", "/var/www/html/artisan"]
  npm:
    image: node
    working_dir: /var/www/html
    entrypoint: ["npm"]
    volumes:
      - ./src:/var/www/html
    
volumes:
  mysql-db-data: